<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_moth_collision</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_physics</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
depth = -8

//BEGIN STEP
//controls/major states
_slashing = false
_hovering = false
_charged = false; _charging = 0
_facing_right = false
_on_ground = false
_was_on_ground = _on_ground

//pain
_pain = 0
_painbox = instance_create(x,y,obj_player_painbox)
_in_pain = false
_was_in_pain = _in_pain
_pain_time = 0
_pain_time_end = 0.3
//
invincible = -1

//END STEP
//damage
swordbox = instance_create(x,y,obj_player_swordbox)
__can_create_swordbox = true

//DRAW
_sprite = spr_moth_idle
_frame = 0
_animspeed = 0.3
__old_sprite = _sprite

_hover_sprite = spr_moth_jump_hover
_hover_frame = 0
_hover_animspeed = 0.5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DEAL DAMAGE

//ATTACKBOX
//(Reset state)
if _sprite != spr_moth_slash {__can_create_swordbox = true}

//Destroy
if swordbox != false
{
    with (swordbox) { instance_destroy(); } 
    swordbox = false
}
//Create
if _sprite == spr_moth_slash and swordbox == false and _frame &gt; 1
and __can_create_swordbox
{
    swordbox = instance_create(x,y,obj_player_swordbox)
    if not _facing_right{swordbox.image_xscale=-1}
    __can_create_swordbox = false
}
//Use
if swordbox != false
{
    if _facing_right{swordbox.image_xscale = +1}
    if not _facing_right{swordbox.image_xscale = -1}
    swordbox.x=x+1
    swordbox.y=y-18
}

//ATTACK ENEMIES

//reset
with obj_group_enemy
{
    hitfrom_behind = false
    _hit = false
}

//sword
if swordbox != false
{
    with obj_group_enemy
    {
        if painbox != false
        {
            if place_meeting(x,y,ins_Player.swordbox)
            {
                pain=1
                //mmm, satisfying
                /*__move = 4
                if ins_Player._facing_right{ins_Player.move_x = -__move}
                else{ins_Player.move_x = +__move}*/
                //
                room_speed = 30
                //
                __sword = ins_Player.swordbox
                if ins_Player._facing_right{__x = __sword.x + 30}
                else{__x = __sword.x - 30}
                __y = __sword.y + (__sword.sprite_height/2)
                __sfx = instance_create(__x,__y,obj_slash)
                __sfx.depth = -9
            }
        }
    }
}
//wanderer's wave
with obj_group_enemy
{
    if painbox != false
    {
        if place_meeting(x,y,obj_wandererswave) and hitby_wave = false
        {
            pain=1
            hitby_wave = true
        }
        else if not place_meeting(x,y,obj_wandererswave)
        {hitby_wave = false}
    }
}


//LOCATION
with obj_group_enemy
{
    if ins_Player.x + (ins_Player.sprite_width/2) &gt; x + (sprite_width/2)
    {playeris_right = true}
    else
    {playeris_right = false}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//RESET
if room_speed != 60{room_speed = 60;}

//PHYSICS
slow_x = 0.25
move_y += 0.25

//cap
if _charged{cap_x = 1}
else{cap_x = 2.5}
//reset on floor
if place_meeting(x,y+1,obj_solid)
{move_y = 0;}
//ceiling bump
if place_meeting(x,y-1,obj_solid)
and move_y &lt; 0
{move_y = 0;}


//STATES
//ground
_on_ground = false
if place_meeting(x,y+1,obj_solid){_on_ground = true}
//just hit ground
if _on_ground and not _was_on_ground{sound_abs(snd_player_land);}
_was_on_ground = _on_ground
//slashing
if _frame &gt;= 4 and _sprite == spr_moth_slash{_slashing = false;}
//hover
if _on_ground{_hovering = false}


//CONTROLS
//move
if not _in_pain
{
    if keyboard_check(vk_left)
    {
        move_x -= 1
        if not _slashing{_facing_right = false}
    }
    if keyboard_check(vk_right)
    {
        move_x += 1
        if not _slashing{_facing_right = true}
    }
    
    //jump/hovering
    if keyboard_check_pressed(ord('Z'))
    {
        if not _on_ground and not _hovering
        {move_y = -3; _hovering = true; sound_abs(snd_player_flutter);}
        if _on_ground{move_y = -4.5; sound_abs(snd_player_jump);}
    }
    //jump height
    if keyboard_check_released(ord('Z')) and not _hovering
    {
        if move_y &lt;= 0 {move_y += 1.5;}
    }
    
    //slash
    if keyboard_check_pressed(ord('X')) and _sprite != spr_moth_slash
    {_slashing = true; sound_abs(snd_player_sword);}
    
    //wanderer's wave
    //start
    if keyboard_check(ord('X')) and not _slashing and _charging == 0
    {_charging = 1; sound_abs(snd_player_charge);}
    //finish
    if _charging == 45
    {
        _charged = true;
        sound_abs(snd_player_charged); audio_stop_sound(snd_player_charge)
    }
    //stop
    if not keyboard_check(ord('X'))
    {
        //release the wave!
        if _charged
        {
            sound_abs(snd_player_shoot)
            if _facing_right==true {__x = x + 35-8}
            if _facing_right==false{__x = x - 35+8}
            __ww = instance_create(__x,y-9, obj_wandererswave);
            if _facing_right{__ww.facing_right = true;}
            _slashing = true;
        }
        _charging=0; _charged = false; audio_stop_sound(snd_player_charge)
    }
    //loop
    if _charging != 0{_charging += 1}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//PAIN

//Position painbox.
_painbox.x = x-4; _painbox.y = y-16

//Grab damage from enemies.
with obj_group_enemy
{
    if attackbox != false
    {
        if place_meeting(x,y,ins_Player._painbox)
        {
            if ins_Player.invincible == -1
            {
                //move
                c1 = ins_Player.x+(ins_Player.sprite_width/2)
                c2 = x+(sprite_width/2)
                if c1 &gt;= c2{ins_Player.move_x = +5;_facing_right=false}
                else       {ins_Player.move_x = -5;_facing_right=true}
                ins_Player.move_y = -4.5
                //disable states
                ins_Player._hovering = false
                ins_Player._slashing = false
                //pain
                ins_Player._in_pain = true
                //invincible
                ins_Player.invincible = 1
                //time
                room_speed = 10;
                //sound
                sound_abs(snd_player_hurt);
                
            }
        }
    }
}
if _in_pain
{ins_Player.slow_x = 0.1}


//STATE - invincibility
if invincible != -1{invincible += 1}
if invincible &gt;= 60{invincible = -1}

//STATE - wince in pain.
//Start
if not _was_in_pain and _in_pain{_pain_time = 0}
//Progress
if _in_pain{_pain_time += 1}
//Stop
if _pain_time/60 &gt; _pain_time_end{_in_pain = false}
//
_was_in_pain = _in_pain
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//direction, origin
if _facing_right == true {_flip = 1}
if _facing_right == false {_flip = -1}
_x = x+1; _y = y


//HITBOX
//draw_me()


//color
__color = make_color_rgb(255,255,255)
if _charged or (_charging &gt; 0 and _charging mod 3 == 0)
{__color = make_color_rgb(255,75,255)}

//alpha
__alpha = 1
if invincible mod 2 == 0{__alpha = 0.3}

//WINGS
if _hovering
{
    _hover_frame += _hover_animspeed
    _hover_frame = _hover_frame mod sprite_get_number(_hover_sprite)
    draw_sprite_ext
    (_hover_sprite, _hover_frame, _x,_y, _flip,1, 0, __color, __alpha/2);
}

//MOTH
//sprite
_sprite=spr_moth_idle; _animspeed = 0.1
if move_x != 0 and _on_ground{_sprite=spr_moth_walk; _animspeed=0.3}
if not _on_ground
{
    if move_y &gt;  0 {_sprite=spr_moth_jump_down;}
    if move_y &lt;= 0 {_sprite=spr_moth_jump_up;}
}
if _slashing{_sprite=spr_moth_slash; _animspeed = 0.4}
if _in_pain{_sprite=spr_moth_pain;}

//(reset frame)
if _sprite != __old_sprite {_frame = 0;}
__old_sprite = _sprite

//draw
_frame += _animspeed
_frame = _frame mod sprite_get_number(_sprite)

draw_sprite_ext(_sprite, _frame, _x,_y, _flip,1, 0, __color, __alpha );


//with _painbox{draw_me()}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
